plugins {
    id "io.spring.dependency-management" version "1.1.6"
    id "org.gretty" version "4.1.5"
    id 'idea'
    id 'war'
    id 'org.sonarqube' version '5.1.0.4882'
    id "org.owasp.dependencycheck" version "10.0.4"
    id 'jacoco'
}

def buildDirectory = project.layout.buildDirectory.get().asFile

ext {
    commonVersion = System.properties['commonVersion'] ?: '4.0.0-SNAPSHOT'
    infraVersion = System.properties['infraVersion'] ?: '4.0.0-SNAPSHOT'

    rivtaStoreLogSchemasVersion = "2.0.1.1"
    schemasContractVersion = "2.1.8.2"

    apacheCXFVersion = "4.0.5"
    camelVersion = "4.8.0"
    geronimoVersion = "1.1.1"
    googleGuavaVersion = "3.0.0-jre"
    jakartaJwsApiVersion = "3.0.0"
    jaxb2Version = "3.0.0"

    springbootMavenBomVersion = "3.3.4"

    nvdMirror = 'https://vulnz-nvd-mirror-devtest.intyg.nordicmedtest.se'
}

group = 'se.inera.intyg.logsender'
version = System.properties['buildVersion'] ?: '0-SNAPSHOT'
sourceCompatibility = 21
targetCompatibility = 21

gretty {
    def instance = System.properties['instance'] ?: '0'
    def useHttpPort = 8010 + (instance as Integer)
    def useInternalHttpPort = 8110 + (instance as Integer)
    def applicationDir = "${projectDir}/devops/dev"

    servletContainer = 'tomcat10'
    contextPath = '/'

    integrationTestTask = null
    scanInterval = 0
    debugPort = 8810 + (instance as Integer)
    portPropertiesFileName = "gretty_ports_${instance}.properties"
    debugSuspend = false
    serverConfigFile = "tomcat-gretty.xml"

    jvmArgs = [
            "-Dcatalina.base=${buildDirectory}/catalina.base",
            "-Dspring.profiles.active=dev,wc-loggtjanst-stub,testability-api,caching-enabled",
            "-Dapplication.dir=${applicationDir}",
            "-Dlogback.file=${applicationDir}/config/logback-dev.xml",
            "-Djava.awt.headless=true",
            "-Dfile.encoding=UTF-8",
            "-Ddev.config.file=${applicationDir}/config/application-dev.properties",
            "-Ddev.http.port=${useHttpPort}",
            "-Ddev.http.port.internal=${useInternalHttpPort}"
    ]

    extraResourceBase 'build/apps/'
}


tasks.withType(War).configureEach {
    destinationDirectory = file("$rootDir/web/build/libs")
}

tasks.register('camelTest', Test) {
    useJUnitPlatform()
    outputs.upToDateWhen { false }
    include '**/*IT*'
    jvmArgs = gretty.jvmArgs
}


repositories {
    mavenLocal()
    maven { url "https://nexus.drift.inera.se/repository/it-public/" }
    mavenCentral {
        content {
            // this repository contains everything BUT artifacts with group starting with "se.inera"
            excludeGroupByRegex "se\\.inera.*"
        }
    }
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/testability/**",
                    "**/integrationtest/**"
            ])
        }))
    }
}

test {
    useJUnitPlatform()
    exclude '**/*IT*'
    jvmArgs = gretty.jvmArgs
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springbootMavenBomVersion}"
    }
}

dependencies {
    implementation "se.inera.intyg.schemas:schemas-contract:${schemasContractVersion}"
    implementation "se.riv.informationsecurity.auditing.log:informationsecurity-auditing-log-schemas:${rivtaStoreLogSchemasVersion}"

    implementation "se.inera.intyg.common:integration-util:${commonVersion}"
    implementation "se.inera.intyg.common:logging-util:${commonVersion}"
    implementation "se.inera.intyg.infra:log-messages:${infraVersion}"
    implementation "se.inera.intyg.infra:loggtjanst-stub:${infraVersion}"
    implementation "se.inera.intyg.infra:monitoring:${infraVersion}"

    implementation "com.google.guava:guava:${guavaVersion}"
    implementation "com.sun.activation:jakarta.activation"
    implementation "org.apache.activemq:activemq-spring"
    implementation "org.apache.camel:camel-activemq:${camelVersion}"
    implementation "org.apache.camel:camel-core:${camelVersion}"
    implementation "org.apache.cxf:cxf-rt-features-logging:${apacheCXFVersion}"
    implementation "org.apache.cxf:cxf-rt-frontend-jaxws:${apacheCXFVersion}"
    implementation "org.apache.cxf:cxf-rt-transports-http:${apacheCXFVersion}"
    implementation "codes.rafael.jaxb2_commons:jaxb2-basics:${jaxb2Version}"
    implementation "org.springframework:spring-webmvc"
    implementation "org.springframework:spring-jms"

    compileOnly "jakarta.servlet:jakarta.servlet-api"
    compileOnly "jakarta.ws.rs:jakarta.ws.rs-api"
    compileOnly "org.apache.geronimo.specs:geronimo-jms_1.1_spec:${geronimoVersion}"

    runtimeOnly "org.apache.camel:camel-jms:${camelVersion}"
    runtimeOnly "org.apache.camel:camel-spring:${camelVersion}"
    runtimeOnly "org.apache.camel:camel-spring-xml:${camelVersion}"
    runtimeOnly "org.glassfish.jaxb:jaxb-runtime"

    testImplementation "org.apache.activemq:activemq-broker"
    testImplementation "org.apache.camel:camel-test-spring-junit5:${camelVersion}"
    testImplementation "org.awaitility:awaitility"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.mockito:mockito-junit-jupiter"
    testImplementation "org.springframework:spring-test"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

    gretty "org.apache.activemq:activemq-client"
    gretty "org.apache.activemq:activemq-broker"
    gretty "com.mysql:mysql-connector-j"
}

sonar {
    properties {
        property "sonar.projectKey", "intyg-logsender"
        property "sonar.projectName", "intyg-logsender"
        property "sonar.dependencyCheck.jsonReportPath", "${layout.buildDirectory.get()}/reports/dependency-check-report.json" as String
        property "sonar.dependencyCheck.htmlReportPath", "${layout.buildDirectory.get()}/reports/dependency-check-report.html" as String
    }
}

dependencyCheck {
    formats = List.of("HTML", "JSON")
    nvd.setDatafeedUrl(nvdMirror)
    analyzers.setAssemblyEnabled(false)
}

